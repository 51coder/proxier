/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/draveness/proxier/pkg/apis/maegus/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProxierLister helps list Proxiers.
type ProxierLister interface {
	// List lists all Proxiers in the indexer.
	List(selector labels.Selector) (ret []*v1.Proxier, err error)
	// Proxiers returns an object that can list and get Proxiers.
	Proxiers(namespace string) ProxierNamespaceLister
	ProxierListerExpansion
}

// proxierLister implements the ProxierLister interface.
type proxierLister struct {
	indexer cache.Indexer
}

// NewProxierLister returns a new ProxierLister.
func NewProxierLister(indexer cache.Indexer) ProxierLister {
	return &proxierLister{indexer: indexer}
}

// List lists all Proxiers in the indexer.
func (s *proxierLister) List(selector labels.Selector) (ret []*v1.Proxier, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Proxier))
	})
	return ret, err
}

// Proxiers returns an object that can list and get Proxiers.
func (s *proxierLister) Proxiers(namespace string) ProxierNamespaceLister {
	return proxierNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProxierNamespaceLister helps list and get Proxiers.
type ProxierNamespaceLister interface {
	// List lists all Proxiers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Proxier, err error)
	// Get retrieves the Proxier from the indexer for a given namespace and name.
	Get(name string) (*v1.Proxier, error)
	ProxierNamespaceListerExpansion
}

// proxierNamespaceLister implements the ProxierNamespaceLister
// interface.
type proxierNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Proxiers in the indexer for a given namespace.
func (s proxierNamespaceLister) List(selector labels.Selector) (ret []*v1.Proxier, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Proxier))
	})
	return ret, err
}

// Get retrieves the Proxier from the indexer for a given namespace and name.
func (s proxierNamespaceLister) Get(name string) (*v1.Proxier, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("proxier"), name)
	}
	return obj.(*v1.Proxier), nil
}
